#!/bin/bash

# Script de verificaci√≥n de c√≥digo sin compilaci√≥n completa
# √ötil para entornos sin Android SDK

echo "üîç Verificando estructura del proyecto SocialMovie..."
echo ""

# Colores
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

errors=0

# 1. Verificar estructura de paquetes
echo "üì¶ Verificando estructura de paquetes..."
if [ -d "app/src/main/java/com/example/aplicacion" ]; then
    echo -e "${GREEN}‚úÖ Estructura de paquetes correcta${NC}"
else
    echo -e "${RED}‚ùå Estructura de paquetes incorrecta${NC}"
    errors=$((errors + 1))
fi

# 2. Verificar archivos de configuraci√≥n
echo ""
echo "‚öôÔ∏è  Verificando archivos de configuraci√≥n..."

files=("build.gradle" "app/build.gradle" "settings.gradle" "gradle.properties")
for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $file existe${NC}"
    else
        echo -e "${RED}‚ùå $file no encontrado${NC}"
        errors=$((errors + 1))
    fi
done

# 3. Verificar archivos Java principales
echo ""
echo "‚òï Verificando archivos Java principales..."

java_files=(
    "app/src/main/java/com/example/aplicacion/MainActivity.java"
    "app/src/main/java/com/example/aplicacion/RegisterActivity.java"
    "app/src/main/java/com/example/aplicacion/ResetPasswordActivity.java"
    "app/src/main/java/com/example/aplicacion/ui/adapters/BaseMovieAdapter.java"
    "app/src/main/java/com/example/aplicacion/ui/adapters/MovieRecyclerView.java"
    "app/src/main/java/com/example/aplicacion/utils/ValidationUtils.java"
    "app/src/main/java/com/example/aplicacion/utils/Constants.java"
)

for file in "${java_files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $(basename $file)${NC}"
    else
        echo -e "${RED}‚ùå $(basename $file) no encontrado${NC}"
        errors=$((errors + 1))
    fi
done

# 4. Verificar sintaxis b√°sica de Java
echo ""
echo "üîé Verificando sintaxis b√°sica..."

# Buscar errores comunes de sintaxis
echo "   Buscando packages duplicados..."
duplicated_packages=$(find app/src/main/java -name "*.java" -exec grep -l "^package.*package" {} \;)
if [ -z "$duplicated_packages" ]; then
    echo -e "${GREEN}‚úÖ No hay packages duplicados${NC}"
else
    echo -e "${RED}‚ùå Packages duplicados encontrados:${NC}"
    echo "$duplicated_packages"
    errors=$((errors + 1))
fi

echo "   Buscando imports duplicados..."
duplicated_imports=$(find app/src/main/java -name "*.java" -exec grep -l "^import.*import" {} \;)
if [ -z "$duplicated_imports" ]; then
    echo -e "${GREEN}‚úÖ No hay imports duplicados${NC}"
else
    echo -e "${RED}‚ùå Imports duplicados encontrados:${NC}"
    echo "$duplicated_imports"
    errors=$((errors + 1))
fi

# 5. Verificar tests
echo ""
echo "üß™ Verificando tests..."

test_files=(
    "app/src/test/java/com/example/aplicacion/utils/ValidationUtilsTest.java"
    "app/src/test/java/com/example/aplicacion/validators/EmailValidatorTest.java"
)

for file in "${test_files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $(basename $file)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $(basename $file) no encontrado${NC}"
    fi
done

# 6. Verificar documentaci√≥n
echo ""
echo "üìö Verificando documentaci√≥n..."

doc_files=(
    "README.md"
    "BUILD_GUIDE.md"
    "SPRINT3_COMPLETED.md"
    "SPRINT3_SUMMARY.md"
)

for file in "${doc_files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $file${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $file no encontrado${NC}"
    fi
done

# 7. Verificar CI/CD
echo ""
echo "üîÑ Verificando configuraci√≥n CI/CD..."

if [ -f ".github/workflows/android.yml" ]; then
    echo -e "${GREEN}‚úÖ GitHub Actions configurado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  GitHub Actions no configurado${NC}"
fi

# 8. Verificar ProGuard
echo ""
echo "üîí Verificando configuraci√≥n ProGuard..."

if [ -f "app/proguard-rules.pro" ]; then
    lines=$(wc -l < "app/proguard-rules.pro")
    if [ "$lines" -gt 100 ]; then
        echo -e "${GREEN}‚úÖ ProGuard configurado ($lines l√≠neas)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  ProGuard tiene pocas reglas ($lines l√≠neas)${NC}"
    fi
else
    echo -e "${RED}‚ùå ProGuard no configurado${NC}"
    errors=$((errors + 1))
fi

# 9. Verificar git
echo ""
echo "üîç Verificando repositorio Git..."

if [ -d ".git" ]; then
    echo -e "${GREEN}‚úÖ Repositorio Git inicializado${NC}"
    
    # Verificar remote
    remote=$(git remote -v | grep origin | head -1)
    if [ -n "$remote" ]; then
        echo -e "${GREEN}‚úÖ Remote configurado: $(git remote get-url origin)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No hay remote configurado${NC}"
    fi
    
    # Verificar branch
    branch=$(git branch --show-current)
    echo -e "${GREEN}‚úÖ Branch actual: $branch${NC}"
    
    # Verificar cambios pendientes
    if [[ -n $(git status -s) ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Hay cambios sin commit${NC}"
        echo "   Archivos modificados:"
        git status -s | head -5
    else
        echo -e "${GREEN}‚úÖ No hay cambios pendientes${NC}"
    fi
else
    echo -e "${RED}‚ùå No es un repositorio Git${NC}"
    errors=$((errors + 1))
fi

# Resumen final
echo ""
echo "================================"
if [ $errors -eq 0 ]; then
    echo -e "${GREEN}‚úÖ VERIFICACI√ìN COMPLETADA SIN ERRORES${NC}"
    echo ""
    echo "El c√≥digo est√° listo para:"
    echo "  ‚Ä¢ Push a GitHub (compilar√° en CI/CD)"
    echo "  ‚Ä¢ Apertura en Android Studio"
    echo "  ‚Ä¢ Compilaci√≥n con SDK instalado"
    echo ""
    echo "Para compilar localmente, consulta BUILD_GUIDE.md"
    exit 0
else
    echo -e "${RED}‚ùå VERIFICACI√ìN COMPLETADA CON $errors ERROR(ES)${NC}"
    echo ""
    echo "Revisa los errores arriba y corr√≠gelos antes de continuar."
    exit 1
fi
